import React, { useState } from "react";
import {
  Box,
  Typography,
  Button,
  IconButton,
  TextField,
  Grid,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Card,
  CardContent,
  CardMedia,
  Chip,
  CircularProgress,
} from "@mui/material";
import {
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  AddCircleOutline,
  RemoveCircleOutline,
} from "@mui/icons-material";
import AttachMoneyIcon from "@mui/icons-material/AttachMoney";
import AccessTimeIcon from "@mui/icons-material/AccessTime";
import VideoLibraryIcon from "@mui/icons-material/VideoLibrary";
import { Snackbar, Alert } from "@mui/material";

const API_URL = "http://localhost:5000/api/images/upload";

const MenuManagement = () => {
  const [menuItems, setMenuItems] = useState([]);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingItem, setEditingItem] = useState(null);
  const [uploading, setUploading] = useState(false);
  const [uploadError, setUploadError] = useState("");
  const [formData, setFormData] = useState({
    name: "",
    description: "",
    price: "",
    category: "",
    image: "",
    preparationTime: "",
  });
  const [imagePreview, setImagePreview] = useState("");
  const [selectedImageFile, setSelectedImageFile] = useState(null);
  const [successMessage, setSuccessMessage] = useState("");

  const formatPrice = (price) =>
    new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(price);

  const handleAdd = () => {
    setEditingItem(null);
    setFormData({
      name: "",
      description: "",
      price: "",
      category: "",
      image: "",
      preparationTime: "",
    });
    setImagePreview(""); // reset preview khi t·∫°o m·ªõi
    setSelectedImageFile(null); // x√≥a file ·∫£nh t·∫°m ƒë√£ ch·ªçn
    setUploadError("");
    setIsDialogOpen(true);
  };

  const handleEdit = (item) => {
    setEditingItem(item);
    setFormData({
      name: item.name,
      description: item.description,
      price: String(item.price),
      category: item.category,
      image: item.image,
      preparationTime: String(item.preparationTime),
    });
    setImagePreview(item.image); // ‚úÖ gi·ªØ preview c≈© khi s·ª≠a
    setSelectedImageFile(null); // x√≥a file ·∫£nh t·∫°m ƒë√£ ch·ªçn
    setUploadError("");
    setIsDialogOpen(true);
  };

  // üñºÔ∏è Ch·ªçn ·∫£nh (ch·ªâ l∆∞u t·∫°m & hi·ªÉn th·ªã preview)
  const handleImageSelect = (e) => {
    const file = e.target.files?.[0];
    if (!file) return;
    setSelectedImageFile(file);
    setImagePreview(URL.createObjectURL(file));
    setUploadError("");
  };

  // üíæ L∆∞u m√≥n ƒÉn
  const handleSave = async () => {
    // 1) VALIDATE c∆° b·∫£n
    if (!selectedImageFile && !formData.image) {
      setUploadError("‚ö†Ô∏è Vui l√≤ng ch·ªçn ·∫£nh s·∫£n ph·∫©m tr∆∞·ªõc khi l∆∞u!");
      return;
    }
    if (!formData.name.trim() || !formData.price.trim()) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n m√≥n v√† gi√°!");
      return;
    }

    // 2) (N·∫æU C√ì) UPLOAD ·∫¢NH L√äN SERVER ‚Üí FIREBASE
    let imageUrl = formData.image; // n·∫øu ƒëang s·ª≠a v√† ch∆∞a ƒë·ªïi ·∫£nh, d√πng ·∫£nh c≈©
    if (selectedImageFile) {
      setUploading(true);
      setUploadError("");

      const formDataUpload = new FormData();
      formDataUpload.append("image", selectedImageFile);

      try {
        const res = await fetch(API_URL, {
          method: "POST",
          body: formDataUpload,
        });
        const data = await res.json();

        if (!res.ok || !data.imageUrl) {
          setUploadError(data?.error || "Upload th·∫•t b·∫°i!");
          setUploading(false);
          return; // ‚ùå D·ª™NG T·∫†I ƒê√ÇY n·∫øu upload l·ªói ‚Äî KH√îNG hi·ªán success
        }

        // ‚úÖ Upload th√†nh c√¥ng ‚Üí ƒë√£ c√≥ URL public
        console.log("üì∏ ·∫¢nh ƒë√£ upload l√™n Firebase:", data.imageUrl);
        imageUrl = data.imageUrl;
      } catch (err) {
        console.error("‚ùå L·ªói upload:", err);
        setUploadError("Kh√¥ng th·ªÉ upload ·∫£nh l√™n server!");
        setUploading(false);
        return; // ‚ùå D·ª™NG T·∫†I ƒê√ÇY n·∫øu upload l·ªói ‚Äî KH√îNG hi·ªán success
      } finally {
        setUploading(false);
      }
    }

    // 3) T·∫†O ƒê·ªêI T∆Ø·ª¢NG M√ìN ƒÇN
    const newItem = {
      id: editingItem ? editingItem.id : Date.now(),
      ...formData,
      image: imageUrl, // üîó d√πng URL ƒë√£ upload (ho·∫∑c ·∫£nh c≈© n·∫øu kh√¥ng ƒë·ªïi)
      price: parseInt(formData.price, 10) || 0,
      preparationTime: parseInt(formData.preparationTime, 10) || 0,
      status: "active",
      hasVideo: false,
    };

    // 4) (TODO) G·ª¨I newItem L√äN API TH·∫¨T T·∫†I ƒê√ÇY N·∫æU C·∫¶N
    console.log("üì¶ [TODO] G·ª≠i th√¥ng tin s·∫£n ph·∫©m:", newItem);

    // 5) C·∫¨P NH·∫¨T DANH S√ÅCH ·ªû UI
    if (editingItem) {
      setMenuItems((items) => items.map((i) => (i.id === editingItem.id ? newItem : i)));
    } else {
      setMenuItems((items) => [newItem, ...items]);
    }

    // 6) ‚úÖ HI·ªÇN TH·ªä TH√îNG B√ÅO TH√ÄNH C√îNG
    setSuccessMessage(
      editingItem
        ? "‚úÖ ·∫¢nh ƒë√£ ƒë∆∞·ª£c upload v√† m√≥n ƒÉn ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!"
        : "‚úÖ ·∫¢nh ƒë√£ ƒë∆∞·ª£c upload v√† m√≥n ƒÉn ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!"
    );

    // 7) ƒê√ìNG DIALOG & RESET C√ÅC TR·∫†NG TH√ÅI T·∫†M
    setIsDialogOpen(false);
    setSelectedImageFile(null); // b·ªè file t·∫°m
    // KH√îNG x√≥a imagePreview: ƒë·ªÉ user th·∫•y k·∫øt qu·∫£ ngo√†i danh s√°ch
  };

  const handleDelete = (id) =>
    setMenuItems((items) => items.filter((i) => i.id !== id));

  // üéõÔ∏è ƒêi·ªÅu ch·ªânh gi√° / th·ªùi gian
  const adjustValue = (field, delta, step = 1) => {
    setFormData((prev) => {
      const current = parseInt(prev[field] || "0", 10);
      let next = current + delta * step;
      if (field === "price") next = Math.max(0, next);
      if (field === "preparationTime") next = Math.max(0, next);
      return { ...prev, [field]: String(next) };
    });
  };

  return (
    <Box sx={{ display: "flex", flexDirection: "column", gap: 3 }}>
      {/* Header */}
      <Box
        sx={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
        }}
      >
        <Box>
          <Typography variant="h6">Qu·∫£n l√Ω m√≥n ƒÉn</Typography>
          <Typography variant="body2" color="text.secondary">
            Qu·∫£n l√Ω menu v√† m√≥n ƒÉn c·ªßa shop
          </Typography>
        </Box>
        <Button
          variant="contained"
          startIcon={<AddIcon />}
          onClick={handleAdd}
          sx={{ bgcolor: "#ff6900", "&:hover": { bgcolor: "#e55a3a" } }}
        >
          Th√™m m√≥n m·ªõi
        </Button>
      </Box>

      {/* Danh s√°ch m√≥n ƒÉn */}
      {menuItems.length === 0 ? (
        <Box
          sx={{
            textAlign: "center",
            py: 5,
            color: "text.secondary",
            border: "1px dashed rgba(0,0,0,0.2)",
            borderRadius: 2,
          }}
        >
          <Typography variant="body1">üì≠ Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o</Typography>
          <Typography variant="body2">
            H√£y nh·∫•n ‚ÄúTh√™m m√≥n m·ªõi‚Äù ƒë·ªÉ b·∫Øt ƒë·∫ßu.
          </Typography>
        </Box>
      ) : (
        <Grid container spacing={3}>
          {menuItems.map((item) => (
            <Grid item xs={12} sm={6} md={4} key={item.id}>
              <Card sx={{ overflow: "hidden" }}>
                <Box sx={{ position: "relative" }}>
                  <CardMedia
                    component="img"
                    height="200"
                    image={item.image}
                    alt={item.name}
                  />
                  {item.hasVideo && (
                    <Chip
                      size="small"
                      color="error"
                      icon={<VideoLibraryIcon sx={{ fontSize: 16 }} />}
                      label="Video"
                      sx={{ position: "absolute", top: 8, right: 8 }}
                    />
                  )}
                </Box>
                <CardContent>
                  <Box sx={{ display: "flex", flexDirection: "column", gap: 1.5 }}>
                    <Typography fontWeight={600} noWrap>
                      {item.name}
                    </Typography>
                    <Typography
                      variant="body2"
                      color="text.secondary"
                      sx={{
                        display: "-webkit-box",
                        WebkitLineClamp: 2,
                        WebkitBoxOrient: "vertical",
                        overflow: "hidden",
                      }}
                    >
                      {item.description}
                    </Typography>
                    <Box
                      sx={{
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                      }}
                    >
                      <Chip
                        label={item.category}
                        variant="outlined"
                        size="small"
                      />
                      <Chip
                        label={item.status === "active" ? "ƒêang b√°n" : "T·∫°m ng∆∞ng"}
                        size="small"
                        color={item.status === "active" ? "success" : "default"}
                      />
                    </Box>

                    <Box
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        gap: 2,
                        color: "text.secondary",
                      }}
                    >
                      <Box sx={{ display: "flex", alignItems: "center", gap: 0.5 }}>
                        <AttachMoneyIcon sx={{ fontSize: 18 }} />
                        <Typography color="text.primary" fontWeight={500}>
                          {formatPrice(item.price)}
                        </Typography>
                      </Box>
                      <Box sx={{ display: "flex", alignItems: "center", gap: 0.5 }}>
                        <AccessTimeIcon sx={{ fontSize: 18 }} />
                        <Typography>{item.preparationTime} ph√∫t</Typography>
                      </Box>
                    </Box>

                    <Box sx={{ display: "flex", gap: 1, pt: 1 }}>
                      <Button
                        variant="outlined"
                        size="small"
                        startIcon={<EditIcon />}
                        onClick={() => handleEdit(item)}
                        sx={{ flex: 1 }}
                      >
                        S·ª≠a
                      </Button>
                      <IconButton
                        size="small"
                        onClick={() => handleDelete(item.id)}
                      >
                        <DeleteIcon fontSize="small" />
                      </IconButton>
                    </Box>
                  </Box>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}

      {/* Dialog th√™m/s·ª≠a m√≥n */}
      <Dialog
        open={isDialogOpen}
        onClose={() => setIsDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          {editingItem ? "Ch·ªânh s·ª≠a m√≥n ƒÉn" : "Th√™m m√≥n ƒÉn m·ªõi"}
        </DialogTitle>
        <DialogContent dividers>
          <Box sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
            <TextField
              label="T√™n m√≥n"
              value={formData.name}
              onChange={(e) =>
                setFormData({ ...formData, name: e.target.value })
              }
              fullWidth
              size="small"
            />
            <TextField
              label="M√¥ t·∫£"
              value={formData.description}
              onChange={(e) =>
                setFormData({ ...formData, description: e.target.value })
              }
              fullWidth
              size="small"
              multiline
              minRows={3}
            />

            {/* Gi√° v√† Th·ªùi gian l√†m */}
            <Box sx={{ display: "flex", gap: 2 }}>
              {/* Gi√° */}
              <Box sx={{ flex: 1 }}>
                <Typography variant="body2" sx={{ mb: 0.5 }}>
                  Gi√° (VND)
                </Typography>
                <TextField
                  type="number"
                  value={formData.price}
                  onChange={(e) => {
                    const val = Math.max(0, Math.floor(e.target.value / 1000) * 1000);
                    setFormData({ ...formData, price: val.toString() });
                  }}
                  size="small"
                  fullWidth
                  inputProps={{
                    step: 1000, // m·ªói l·∫ßn tƒÉng/gi·∫£m 1000
                    min: 0,
                  }}
                />
              </Box>

              {/* Th·ªùi gian l√†m */}
              <Box sx={{ flex: 1 }}>
                <Typography variant="body2" sx={{ mb: 0.5 }}>
                  Th·ªùi gian l√†m (ph√∫t)
                </Typography>
                <TextField
                  type="number"
                  value={formData.preparationTime}
                  onChange={(e) => {
                    const val = Math.max(0, parseInt(e.target.value || "0", 10));
                    setFormData({ ...formData, preparationTime: val.toString() });
                  }}
                  size="small"
                  fullWidth
                  inputProps={{
                    step: 1,
                    min: 0,
                  }}
                />
              </Box>
            </Box>

            <TextField
              label="Danh m·ª•c"
              value={formData.category}
              onChange={(e) =>
                setFormData({ ...formData, category: e.target.value })
              }
              fullWidth
              size="small"
            />

            {/* Upload ·∫£nh */}
            <Box>
              <Typography variant="body2" sx={{ mb: 1 }}>
                H√¨nh ·∫£nh s·∫£n ph·∫©m
              </Typography>
              <input
                type="file"
                accept="image/*"
                onChange={handleImageSelect}
                disabled={uploading}
              />
              {uploading && (
                <Box
                  sx={{ display: "flex", alignItems: "center", mt: 1, gap: 1 }}
                >
                  <CircularProgress size={20} />
                  <Typography color="text.secondary">
                    ƒêang t·∫£i ·∫£nh l√™n...
                  </Typography>
                </Box>
              )}
              {uploadError && (
                <Typography color="error" sx={{ mt: 1 }}>
                  {uploadError}
                </Typography>
              )}
              {imagePreview && (
                <Box
                  sx={{
                    mt: 1,
                    border: "1px solid rgba(0,0,0,0.1)",
                    borderRadius: 1,
                    overflow: "hidden",
                  }}
                >
                  <img
                    src={imagePreview}
                    alt="Preview"
                    style={{ width: "100%", height: 160, objectFit: "cover" }}
                  />
                </Box>
              )}
            </Box>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleSave} variant="contained">
            {editingItem ? "C·∫≠p nh·∫≠t" : "Th√™m m√≥n"}
          </Button>
          <Button
            onClick={() => setIsDialogOpen(false)}
            variant="outlined"
            color="inherit"
          >
            H·ªßy
          </Button>
        </DialogActions>
      </Dialog>

      {/* Snackbar hi·ªÉn th·ªã khi upload + l∆∞u th√†nh c√¥ng */}
      <Snackbar
        open={!!successMessage}
        autoHideDuration={3000}
        onClose={() => setSuccessMessage("")}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
      >
        <Alert
          onClose={() => setSuccessMessage("")}
          severity="success"
          sx={{ width: "100%" }}
        >
          {successMessage}
        </Alert>
      </Snackbar>

    </Box>
  );
};

export default MenuManagement;
