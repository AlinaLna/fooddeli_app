// services/notificationService.js
const notificationDao = require("../dao/notificationDao");

const notificationService = {
  /**
   * üì© T·∫°o th√¥ng b√°o m·ªõi
   * @param {object} notificationData - { user_id, title, body }
   * @returns {Promise<object>}
   */
  async createNotification(notificationData) {
    return await notificationDao.create(notificationData);
  },

  /**
   * üì¨ L·∫•y th√¥ng b√°o theo ID
   * @param {number} notificationId
   * @returns {Promise<object|null>}
   */
  async getNotificationById(notificationId) {
    return await notificationDao.findById(notificationId);
  },

  /**
   * üì¨ L·∫•y to√†n b·ªô th√¥ng b√°o c·ªßa m·ªôt user (m·ªõi nh·∫•t tr∆∞·ªõc)
   * @param {number} userId
   * @returns {Promise<object[]>}
   */
  async getNotificationsByUserId(userId) {
    return await notificationDao.getNotificationsByUserId(userId);
  },

  /**
   * üì© L·∫•y danh s√°ch th√¥ng b√°o ch∆∞a ƒë·ªçc c·ªßa m·ªôt user
   * @param {number} userId
   * @returns {Promise<object[]>}
   */
  async getUnreadNotifications(userId) {
    return await notificationDao.getUnreadNotifications(userId);
  },

  /**
   * ‚úÖ ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc cho m·ªôt user
   * @param {number} userId
   * @returns {Promise<number>} - S·ªë l∆∞·ª£ng th√¥ng b√°o ƒë∆∞·ª£c c·∫≠p nh·∫≠t
   */
  async markAllAsRead(userId) {
    return await notificationDao.markAllAsRead(userId);
  },

  /**
   * üì• ƒê√°nh d·∫•u 1 th√¥ng b√°o c·ª• th·ªÉ l√† ƒë√£ ƒë·ªçc
   * @param {number} notificationId
   * @returns {Promise<object>}
   */
  async markAsRead(notificationId) {
    // Ki·ªÉm tra xem th√¥ng b√°o c√≥ t·ªìn t·∫°i kh√¥ng
    const notification = await notificationDao.findById(notificationId);
    if (!notification) {
      throw new Error("Notification not found");
    }

    return await notificationDao.markAsRead(notificationId);
  },

  /**
   * üóëÔ∏è X√≥a m·ªôt th√¥ng b√°o c·ª• th·ªÉ
   * @param {number} notificationId
   * @returns {Promise<boolean>}
   */
  async deleteNotification(notificationId) {
    const notification = await notificationDao.findById(notificationId);
    if (!notification) {
      throw new Error("Notification not found");
    }
    return await notificationDao.delete(notificationId);
  },

  /**
   * üóëÔ∏è X√≥a to√†n b·ªô th√¥ng b√°o c·ªßa m·ªôt user
   * @param {number} userId
   * @returns {Promise<number>} - S·ªë l∆∞·ª£ng th√¥ng b√°o ƒë√£ x√≥a
   */
  async deleteAllNotificationsByUser(userId) {
    const notifications = await notificationDao.getNotificationsByUserId(userId);
    if (notifications.length === 0) {
      return 0;
    }

    let deletedCount = 0;
    for (const n of notifications) {
      const deleted = await notificationDao.delete(n.id);
      if (deleted) deletedCount++;
    }
    return deletedCount;
  },
};

module.exports = notificationService;
