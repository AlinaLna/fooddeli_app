// services/videoCommentService.js
const videoCommentDao = require("../dao/video_commentDao");

const videoCommentService = {
  /**
   * ‚ûï Th√™m b√¨nh lu·∫≠n m·ªõi v√†o video
   * @param {object} commentData - { video_id, user_id, content }
   * @returns {Promise<object>}
   */
  async createComment(commentData) {
    if (!commentData.video_id || !commentData.user_id || !commentData.content) {
      throw new Error("Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc ƒë·ªÉ t·∫°o b√¨nh lu·∫≠n");
    }
    return await videoCommentDao.create(commentData);
  },

  /**
   * üìú L·∫•y b√¨nh lu·∫≠n theo ID
   * @param {number} commentId
   * @returns {Promise<object|null>}
   */
  async getCommentById(commentId) {
    return await videoCommentDao.findById(commentId);
  },

  /**
   * üìú L·∫•y t·∫•t c·∫£ b√¨nh lu·∫≠n c·ªßa m·ªôt video
   * @param {number} videoId
   * @returns {Promise<object[]>}
   */
  async getCommentsByVideoId(videoId) {
    return await videoCommentDao.getCommentsByVideoId(videoId);
  },

  /**
   * ‚úçÔ∏è L·∫•y t·∫•t c·∫£ b√¨nh lu·∫≠n m√† m·ªôt user ƒë√£ vi·∫øt
   * @param {number} userId
   * @returns {Promise<object[]>}
   */
  async getCommentsByUserId(userId) {
    return await videoCommentDao.getCommentsByUserId(userId);
  },

  /**
   * üî¢ ƒê·∫øm s·ªë l∆∞·ª£ng b√¨nh lu·∫≠n c·ªßa m·ªôt video
   * @param {number} videoId
   * @returns {Promise<number>}
   */
  async countCommentsByVideo(videoId) {
    return await videoCommentDao.countCommentsByVideo(videoId);
  },

  /**
   * ‚úèÔ∏è C·∫≠p nh·∫≠t n·ªôi dung b√¨nh lu·∫≠n
   * @param {number} commentId
   * @param {object} updateData - { content }
   * @returns {Promise<object>}
   */
  async updateComment(commentId, updateData) {
    const existing = await videoCommentDao.findById(commentId);
    if (!existing) {
      throw new Error("B√¨nh lu·∫≠n kh√¥ng t·ªìn t·∫°i");
    }

    if (!updateData.content || updateData.content.trim() === "") {
      throw new Error("N·ªôi dung b√¨nh lu·∫≠n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
    }

    return await videoCommentDao.update(commentId, updateData);
  },

  /**
   * üóëÔ∏è X√≥a m·ªôt b√¨nh lu·∫≠n
   * @param {number} commentId
   * @returns {Promise<boolean>}
   */
  async deleteComment(commentId) {
    const existing = await videoCommentDao.findById(commentId);
    if (!existing) {
      throw new Error("B√¨nh lu·∫≠n kh√¥ng t·ªìn t·∫°i");
    }
    return await videoCommentDao.delete(commentId);
  },

  /**
   * üóëÔ∏è X√≥a t·∫•t c·∫£ b√¨nh lu·∫≠n c·ªßa m·ªôt video (d√πng khi x√≥a video)
   * @param {number} videoId
   * @returns {Promise<number>} - S·ªë l∆∞·ª£ng b√¨nh lu·∫≠n ƒë√£ x√≥a
   */
  async deleteCommentsByVideoId(videoId) {
    return await videoCommentDao.deleteCommentsByVideoId(videoId);
  },
};

module.exports = videoCommentService;
