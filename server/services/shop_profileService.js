// services/shopProfileService.js
const shopProfileDao = require("../dao/shop_profileDao");

const shopProfileService = {
  /**
   * ‚ûï T·∫°o h·ªì s∆° shop m·ªõi
   * @param {object} shopData - { user_id, shop_name, address, latitude, longitude, description }
   * @returns {Promise<object>}
   */
  async createShop(shopData) {
    if (!shopData.user_id || !shopData.shop_name) {
      throw new Error("Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: user_id, shop_name");
    }
    return await shopProfileDao.create(shopData);
  },

  /**
   * üì¶ L·∫•y h·ªì s∆° shop theo ID
   * @param {number} shopId
   * @returns {Promise<object|null>}
   */
  async getShopById(shopId) {
    return await shopProfileDao.findById(shopId);
  },

  /**
   * üìç L·∫•y shop theo user_id
   * @param {number} userId
   * @returns {Promise<object|null>}
   */
  async getShopByUserId(userId) {
    return await shopProfileDao.getByUserId(userId);
  },

  /**
   * üìú L·∫•y danh s√°ch t·∫•t c·∫£ shop
   * @returns {Promise<object[]>}
   */
  async getAllShops() {
    return await shopProfileDao.findAll();
  },

  /**
   * ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin shop
   * @param {number} shopId
   * @param {object} updateData
   * @returns {Promise<object>}
   */
  async updateShop(shopId, updateData) {
    const existing = await shopProfileDao.findById(shopId);
    if (!existing) {
      throw new Error("Shop kh√¥ng t·ªìn t·∫°i");
    }
    return await shopProfileDao.update(shopId, updateData);
  },

  /**
   * üóëÔ∏è X√≥a shop theo ID
   * @param {number} shopId
   * @returns {Promise<boolean>}
   */
  async deleteShop(shopId) {
    const existing = await shopProfileDao.findById(shopId);
    if (!existing) {
      throw new Error("Shop kh√¥ng t·ªìn t·∫°i");
    }
    return await shopProfileDao.delete(shopId);
  },

  /**
   * üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i shop (open/closed/pending)
   * @param {number} shopId
   * @param {"open"|"closed"|"pending"} status
   * @returns {Promise<object>}
   */
  async updateShopStatus(shopId, status) {
    const existing = await shopProfileDao.findById(shopId);
    if (!existing) {
      throw new Error("Shop kh√¥ng t·ªìn t·∫°i");
    }
    return await shopProfileDao.updateStatus(shopId, status);
  },

  /**
   * üìç T√¨m c·ª≠a h√†ng g·∫ßn v·ªã tr√≠ ng∆∞·ªùi d√πng trong b√°n k√≠nh X km
   * @param {number} latitude
   * @param {number} longitude
   * @param {number} radiusKm
   * @returns {Promise<object[]>}
   */
  async findNearbyShops(latitude, longitude, radiusKm = 5) {
    if (latitude == null || longitude == null) {
      throw new Error("Thi·∫øu to·∫° ƒë·ªô v·ªã tr√≠ ƒë·ªÉ t√¨m shop g·∫ßn b·∫°n");
    }
    return await shopProfileDao.findNearbyShops(latitude, longitude, radiusKm);
  },

  /**
   * üìà TƒÉng t·ªïng s·ªë ƒë∆°n h√†ng c·ªßa shop (khi ho√†n t·∫•t ƒë∆°n h√†ng)
   * @param {number} shopId
   * @returns {Promise<object>}
   */
  async incrementTotalSales(shopId) {
    const existing = await shopProfileDao.findById(shopId);
    if (!existing) {
      throw new Error("Shop kh√¥ng t·ªìn t·∫°i");
    }
    return await shopProfileDao.incrementTotalSales(shopId);
  },
};

module.exports = shopProfileService;
