// services/shopProfileService.js
const shopProfileDao = require("../dao/shop_profileDao");
const addressDao = require("../dao/addressDao");
const userDao = require("../dao/userDao");
const videoService = require("./videoService");

class ShopProfileService {
  /**
   * üè™ T·∫°o h·ªì s∆° c·ª≠a h√†ng m·ªõi cho user (role = 'shop')
   */
  async createShopProfile(userId, shopData) {
    try {
      // Ki·ªÉm tra user t·ªìn t·∫°i
      const user = await userDao.findById("id", userId);
      if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.");
      if (user.role !== "shop") {
        throw new Error("Ch·ªâ ng∆∞·ªùi d√πng c√≥ role = 'shop' m·ªõi ƒë∆∞·ª£c t·∫°o c·ª≠a h√†ng.");
      }

      // T·∫°o h·ªì s∆° shop
      const shop = await shopProfileDao.create({
        user_id: userId,
        shop_name: shopData.shop_name,
        description: shopData.description ?? "",
        open_hours: shopData.open_hours ?? "",
        closed_hours: shopData.closed_hours ?? "",
        shop_address_id: shopData.shop_address_id ?? null,
      });

      // Tr·∫£ v·ªÅ chi ti·∫øt (k√®m user info)
      return await this.getShopById(shop.id);
    } catch (err) {
      console.error("[ShopProfileService:createShopProfile]", err.message);
      throw new Error("Kh√¥ng th·ªÉ t·∫°o h·ªì s∆° c·ª≠a h√†ng.");
    }
  }

  /**
   * üîç L·∫•y th√¥ng tin shop theo user_id
   */
  async getShopByUserId(userId) {
    try {
      return await shopProfileDao.getByUserId(userId);
    } catch (err) {
      console.error("[ShopProfileService:getShopByUserId]", err.message);
      throw new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin c·ª≠a h√†ng.");
    }
  }

  /**
   * üîç L·∫•y th√¥ng tin shop theo ID (k√®m avatar & rating user)
   */
  async getShopById(shopId) {
    try {
      const shop = await shopProfileDao.findDetailsById(shopId);
      if (!shop) throw new Error("Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng.");
      return shop;
    } catch (err) {
      console.error("[ShopProfileService:getShopById]", err.message);
      throw err;
    }
  }

  /**
   * üì¶ L·∫•y chi ti·∫øt c·ª≠a h√†ng + danh s√°ch video c·ªßa shop
   */
  async getShopDetail(shopId) {
    try {
      const shop = await this.getShopById(shopId);
      const videos = await videoService.getVideosByShop(shopId);
      return { shop, videos };
    } catch (err) {
      console.error("[ShopProfileService:getShopDetail]", err.message);
      throw new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin chi ti·∫øt c·ª≠a h√†ng.");
    }
  }

  /**
   * üìã L·∫•y danh s√°ch t·∫•t c·∫£ c·ª≠a h√†ng
   */
  async getAllShops() {
    try {
      return await shopProfileDao.findAll();
    } catch (err) {
      console.error("[ShopProfileService:getAllShops]", err.message);
      throw new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch c·ª≠a h√†ng.");
    }
  }

  /**
   * ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin c·ª≠a h√†ng
   */
  async updateShopInfo(shopId, updateData) {
    try {
      const shop = await shopProfileDao.update("id", shopId, {
        ...updateData,
        updated_at: new Date(),
      });
      return shop;
    } catch (err) {
      console.error("[ShopProfileService:updateShopInfo]", err.message);
      throw new Error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin c·ª≠a h√†ng.");
    }
  }

  /**
   * üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ª≠a h√†ng (open / closed / pending)
   */
  async updateShopStatus(shopId, status) {
    try {
      return await shopProfileDao.updateStatus(shopId, status);
    } catch (err) {
      console.error("[ShopProfileService:updateShopStatus]", err.message);
      throw new Error("Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i c·ª≠a h√†ng.");
    }
  }

  /**
   * üìç L·∫•y danh s√°ch c·ª≠a h√†ng g·∫ßn ng∆∞·ªùi d√πng
   */
  async getNearbyShops(latitude, longitude, radiusKm = 5) {
    try {
      return await shopProfileDao.findNearbyShops(latitude, longitude, radiusKm);
    } catch (err) {
      console.error("[ShopProfileService:getNearbyShops]", err.message);
      throw new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch c·ª≠a h√†ng g·∫ßn b·∫°n.");
    }
  }

  /**
   * üè† G√°n ƒë·ªãa ch·ªâ cho c·ª≠a h√†ng
   */
  async assignAddressToShop(shopId, addressId) {
    try {
      const address = await addressDao.findById("address_id", addressId);
      if (!address) throw new Error("ƒê·ªãa ch·ªâ kh√¥ng t·ªìn t·∫°i.");

      const updated = await shopProfileDao.update("id", shopId, {
        shop_address_id: addressId,
        updated_at: new Date(),
      });

      return updated;
    } catch (err) {
      console.error("[ShopProfileService:assignAddressToShop]", err.message);
      throw new Error("Kh√¥ng th·ªÉ g√°n ƒë·ªãa ch·ªâ cho c·ª≠a h√†ng.");
    }
  }

  /**
   * ‚ùå X√≥a h·ªì s∆° c·ª≠a h√†ng
   */
  async deleteShop(shopId) {
    try {
      return await shopProfileDao.delete("id", shopId);
    } catch (err) {
      console.error("[ShopProfileService:deleteShop]", err.message);
      throw new Error("Kh√¥ng th·ªÉ x√≥a h·ªì s∆° c·ª≠a h√†ng.");
    }
  }
}

module.exports = new ShopProfileService();
