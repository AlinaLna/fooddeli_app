const productDao = require("../dao/productDao");

const VALID_CATEGORIES = ["Th·ª©c ƒÉn", "ƒê·ªì u·ªëng", "Tr√°ng mi·ªáng", "Kh√°c", "Combo"];

const productService = {
  /**
   * ‚ûï T·∫°o s·∫£n ph·∫©m m·ªõi
   * @param {object} productData - { shop_id, name, description, price, image_url, is_available, category }
   * @returns {Promise<object>}
   */
  async createProduct(productData) {
    const { name, price, shop_id, category } = productData;

    if (!name || !price || !shop_id) {
      throw new Error("Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: name, price, shop_id");
    }

    if (category && !VALID_CATEGORIES.includes(category)) {
      throw new Error(`Danh m·ª•c kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: ${VALID_CATEGORIES.join(", ")}`);
    }

    return await productDao.create({
      ...productData,
      category: category || "Th·ª©c ƒÉn", // default n·∫øu kh√¥ng c√≥
    });
  },

  /**
   * üì¶ L·∫•y s·∫£n ph·∫©m theo ID
   * @param {number} productId
   * @returns {Promise<object|null>}
   */
  async getProductById(productId) {
    return await productDao.findById(productId);
  },

  /**
   * üìú L·∫•y to√†n b·ªô s·∫£n ph·∫©m
   * @returns {Promise<object[]>}
   */
  async getAllProducts() {
    return await productDao.findAll();
  },

  /**
   * ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m
   * @param {number} productId
   * @param {object} updateData
   * @returns {Promise<object>}
   */
  async updateProduct(productId, updateData) {
    const existing = await productDao.findById(productId);
    if (!existing) {
      throw new Error("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i");
    }

    if (updateData.category && !VALID_CATEGORIES.includes(updateData.category)) {
      throw new Error(`Danh m·ª•c kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: ${VALID_CATEGORIES.join(", ")}`);
    }

    return await productDao.update(productId, updateData);
  },

  /**
   * üóëÔ∏è X√≥a s·∫£n ph·∫©m theo ID
   * @param {number} productId
   * @returns {Promise<boolean>}
   */
  async deleteProduct(productId) {
    const existing = await productDao.findById(productId);
    if (!existing) {
      throw new Error("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i");
    }
    return await productDao.delete(productId);
  },

  /**
   * üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i s·∫£n ph·∫©m (c√≤n b√°n / ng·ª´ng b√°n)
   * @param {number} productId
   * @param {boolean} isAvailable
   * @returns {Promise<object>}
   */
  async updateAvailability(productId, isAvailable) {
    const existing = await productDao.findById(productId);
    if (!existing) {
      throw new Error("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i");
    }
    return await productDao.updateAvailability(productId, isAvailable);
  },

  /**
   * üè∑Ô∏è C·∫≠p nh·∫≠t danh m·ª•c s·∫£n ph·∫©m
   * @param {number} productId
   * @param {string} category
   * @returns {Promise<object>}
   */
  async updateCategory(productId, category) {
    if (!VALID_CATEGORIES.includes(category)) {
      throw new Error(`Danh m·ª•c kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: ${VALID_CATEGORIES.join(", ")}`);
    }

    const existing = await productDao.findById(productId);
    if (!existing) {
      throw new Error("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i");
    }

    return await productDao.updateCategory(productId, category);
  },

  /**
   * üè™ L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m c·ªßa m·ªôt shop
   * @param {number} shopId
   * @returns {Promise<object[]>}
   */
  async getProductsByShop(shopId) {
    return await productDao.getProductsByShop(shopId);
  },

  /**
   * üç± L·∫•y s·∫£n ph·∫©m theo danh m·ª•c
   * @param {string} category
   * @param {number} [limit=20]
   * @param {number} [offset=0]
   * @returns {Promise<object[]>}
   */
  async getProductsByCategory(category, limit = 20, offset = 0) {
    if (!VALID_CATEGORIES.includes(category)) {
      throw new Error(`Danh m·ª•c kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: ${VALID_CATEGORIES.join(", ")}`);
    }

    return await productDao.getProductsByCategory(category, limit, offset);
  },

  /**
   * üîç T√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n
   * @param {string} keyword - t·ª´ kh√≥a t√¨m ki·∫øm
   * @param {number} [limit=20]
   * @param {number} [offset=0]
   * @returns {Promise<object[]>}
   */
  async searchProducts(keyword, limit = 20, offset = 0) {
    if (!keyword || keyword.trim() === "") {
      throw new Error("T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
    }
    return await productDao.searchProducts(keyword, limit, offset);
  },

  /**
   * üì¶ L·∫•y danh s√°ch s·∫£n ph·∫©m ƒëang b√°n
   * @returns {Promise<object[]>}
   */
  async getAvailableProducts() {
    return await productDao.getAvailableProducts();
  },

  /**
 * üìÇ L·∫•y t·∫•t c·∫£ danh m·ª•c s·∫£n ph·∫©m (ch·ªâ 4 c√°i)
 * @returns {Promise<object[]>}
 */
async getAllCategories() {
  try {
    return await productDao.getAllCategories();
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y danh m·ª•c s·∫£n ph·∫©m:", err);
    throw new Error("Kh√¥ng th·ªÉ l·∫•y danh m·ª•c s·∫£n ph·∫©m");
  }
}

};

module.exports = productService;
