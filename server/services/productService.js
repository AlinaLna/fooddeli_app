// services/productService.js
const productDao = require("../dao/productDao");

const productService = {
  /**
   * ‚ûï T·∫°o s·∫£n ph·∫©m m·ªõi
   * @param {object} productData - { shop_id, name, description, price, image_url, is_available }
   * @returns {Promise<object>}
   */
  async createProduct(productData) {
    if (!productData.name || !productData.price || !productData.shop_id) {
      throw new Error("Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: name, price, shop_id");
    }
    return await productDao.create(productData);
  },

  /**
   * üì¶ L·∫•y s·∫£n ph·∫©m theo ID
   * @param {number} productId
   * @returns {Promise<object|null>}
   */
  async getProductById(productId) {
    return await productDao.findById(productId);
  },

  /**
   * üìú L·∫•y to√†n b·ªô s·∫£n ph·∫©m
   * @returns {Promise<object[]>}
   */
  async getAllProducts() {
    return await productDao.findAll();
  },

  /**
   * ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m
   * @param {number} productId
   * @param {object} updateData
   * @returns {Promise<object>}
   */
  async updateProduct(productId, updateData) {
    const existing = await productDao.findById(productId);
    if (!existing) {
      throw new Error("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i");
    }
    return await productDao.update(productId, updateData);
  },

  /**
   * üóëÔ∏è X√≥a s·∫£n ph·∫©m theo ID
   * @param {number} productId
   * @returns {Promise<boolean>}
   */
  async deleteProduct(productId) {
    const existing = await productDao.findById(productId);
    if (!existing) {
      throw new Error("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i");
    }
    return await productDao.delete(productId);
  },

  /**
   * üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i s·∫£n ph·∫©m (c√≤n b√°n / ng·ª´ng b√°n)
   * @param {number} productId
   * @param {boolean} isAvailable
   * @returns {Promise<object>}
   */
  async updateAvailability(productId, isAvailable) {
    const existing = await productDao.findById(productId);
    if (!existing) {
      throw new Error("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i");
    }
    return await productDao.updateAvailability(productId, isAvailable);
  },

  /**
   * üè™ L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m c·ªßa m·ªôt shop
   * @param {number} shopId
   * @returns {Promise<object[]>}
   */
  async getProductsByShop(shopId) {
    return await productDao.getProductsByShop(shopId);
  },

  /**
   * üîç T√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n
   * @param {string} keyword - t·ª´ kh√≥a t√¨m ki·∫øm
   * @param {number} [limit=20]
   * @param {number} [offset=0]
   * @returns {Promise<object[]>}
   */
  async searchProducts(keyword, limit = 20, offset = 0) {
    if (!keyword || keyword.trim() === "") {
      throw new Error("T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
    }
    return await productDao.searchProducts(keyword, limit, offset);
  },

  /**
   * üì¶ L·∫•y danh s√°ch s·∫£n ph·∫©m ƒëang b√°n
   * @returns {Promise<object[]>}
   */
  async getAvailableProducts() {
    return await productDao.getAvailableProducts();
  },
};

module.exports = productService;
