console.log("üìÅ ƒê√£ load file authController.js t·ª´:", __filename);

const authService = require("../services/authService");
const userService = require("../services/userService");
const jwt = require("jsonwebtoken");

// ‚úÖ Kh·ªüi t·∫°o Firebase Admin to√†n c·ª•c
let admin;
try {
  admin = require("../config/firebase");
  console.log("‚úÖ Firebase admin loaded th√†nh c√¥ng");
} catch (e) {
  console.error("‚ùå L·ªói khi require firebase:", e);
}

/**
 * üÜï ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
 */
exports.register = async (req, res) => {
  try {
    const newUser = await authService.register(req.body);

    res.status(201).json({
      success: true,
      message: "‚úÖ ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng",
      user: {
        id: newUser.id,
        username: newUser.username,
        full_name: newUser.fullname,
        phone: newUser.phone,
        email: newUser.email,
        address: newUser.address,
        role: newUser.role,
      },
    });
  } catch (err) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", err.message);
    res.status(400).json({
      success: false,
      message: err.message || "ƒêƒÉng k√Ω th·∫•t b·∫°i",
    });
  }
};

/**
 * üîë ƒêƒÉng nh·∫≠p b·∫±ng s·ªë ƒëi·ªán tho·∫°i
 */
exports.login = async (req, res) => {
  try {
    const { phone, password } = req.body;

    if (!phone || !password) {
      return res.status(400).json({
        success: false,
        message: "‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß s·ªë ƒëi·ªán tho·∫°i v√† m·∫≠t kh·∫©u",
      });
    }

    const user = await authService.login(phone, password);

    if (!user) {
      return res.status(401).json({
        success: false,
        message: "‚ùå Sai s·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u",
      });
    }

    res.status(200).json({
      success: true,
      message: "‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      user: {
        id: user.id,
        username: user.username,
        full_name: user.full_name,
        phone: user.phone,
        email: user.email,
        role: user.role,
      },
    });
  } catch (err) {
    console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", err.message);
    res.status(500).json({
      success: false,
      message: err.message || "L·ªói server",
    });
  }
};

/**
 * üîê T·∫°o JWT cho user
 */
const generateJwt = (user) => {
  return jwt.sign(
    { id: user.id || user._id, phone: user.phone },
    process.env.JWT_SECRET,
    { expiresIn: "7d" }
  );
};

/**
 * üìû X√°c th·ª±c s·ªë ƒëi·ªán tho·∫°i b·∫±ng Firebase ID Token
 */
exports.verifyPhone = async (req, res) => {
  const { token } = req.body;

  try {
    console.log("üì© Nh·∫≠n request verify-phone:", req.body);

    if (!admin) {
      return res.status(500).json({
        success: false,
        error: "Firebase Admin ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Ki·ªÉm tra c·∫•u h√¨nh.",
      });
    }

    // ‚úÖ X√°c th·ª±c token t·ª´ Firebase
    const decoded = await admin.auth().verifyIdToken(token);
    const phoneNumber = decoded.phone_number;

    console.log("üìû Firebase x√°c th·ª±c th√†nh c√¥ng:", phoneNumber);

    // ‚úÖ Ki·ªÉm tra user t·ªìn t·∫°i
    const user = await userService.getUserByPhone(phoneNumber);
    if (!user) {
      return res.status(404).json({
        success: false,
        error: "üì± T√†i kho·∫£n ch∆∞a t·ªìn t·∫°i. Vui l√≤ng ƒëƒÉng k√Ω tr∆∞·ªõc.",
      });
    }

    // ‚úÖ T·∫°o JWT
    const jwtToken = generateJwt(user);
    return res.status(200).json({
      success: true,
      message: "üì± X√°c th·ª±c th√†nh c√¥ng",
      token: jwtToken,
      user,
    });
  } catch (error) {
    console.error("‚ùå L·ªói x√°c th·ª±c token:", error);
    return res.status(401).json({
      success: false,
      error: "‚ùå Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
    });
  }
};

/**
 * üî¥ ƒêƒÉng xu·∫•t (x√≥a JWT n·∫øu c√≥)
 */
exports.logout = async (req, res) => {
  try {
    res.status(200).json({
      success: true,
      message: "üëã ƒêƒÉng xu·∫•t th√†nh c√¥ng",
    });
  } catch (err) {
    res.status(500).json({
      success: false,
      message: err.message || "L·ªói khi ƒëƒÉng xu·∫•t",
    });
  }
};


exports.sendOtpEmail = async (req, res) => {
  const nodemailer = require("nodemailer");

  const { email } = req.body;
  if (!email) {
    return res.status(400).json({ success: false, message: "Email l√† b·∫Øt bu·ªôc" });
  }

  // ‚úÖ Sinh m√£ OTP 6 s·ªë
  const otp = Math.floor(100000 + Math.random() * 900000).toString();

  // ‚úÖ L∆∞u OTP t·∫°m th·ªùi (5 ph√∫t) ‚Äî production th√¨ n√™n d√πng DB ho·∫∑c Redis
  if (!global.otpStore) global.otpStore = {};
  global.otpStore[email] = { otp, expires: Date.now() + 5 * 60 * 1000 };

  try {
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    });

    await transporter.sendMail({
      from: `"X√°c th·ª±c t√†i kho·∫£n" <${process.env.SMTP_USER}>`,
      to: email,
      subject: "M√£ OTP x√°c th·ª±c",
      text: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}. C√≥ hi·ªáu l·ª±c trong 5 ph√∫t.`,
    });

    console.log(`‚úÖ G·ª≠i OTP ${otp} t·ªõi ${email}`);
    return res.json({ success: true, message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email c·ªßa b·∫°n" });
  } catch (error) {
    console.error("‚ùå L·ªói g·ª≠i email:", error);
    return res.status(500).json({ success: false, message: "Kh√¥ng g·ª≠i ƒë∆∞·ª£c OTP" });
  }
};

// ‚úÖ X√°c minh OTP email
exports.verifyOtpEmail = async (req, res) => {
  const { email, otp } = req.body;

  if (!email || !otp) {
    return res.status(400).json({ success: false, message: "Thi·∫øu email ho·∫∑c OTP" });
  }

  const record = global.otpStore?.[email];
  if (!record) {
    return res.status(400).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y OTP cho email n√†y" });
  }

  if (Date.now() > record.expires) {
    delete global.otpStore[email];
    return res.status(400).json({ success: false, message: "OTP ƒë√£ h·∫øt h·∫°n" });
  }

  if (record.otp !== otp) {
    return res.status(400).json({ success: false, message: "OTP kh√¥ng ch√≠nh x√°c" });
  }

  // ‚úÖ OTP h·ª£p l·ªá ‚Üí x√≥a kh·ªèi store
  delete global.otpStore[email];
  return res.json({ success: true, message: "OTP h·ª£p l·ªá" });
};
