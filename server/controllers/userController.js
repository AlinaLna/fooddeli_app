const userService = require("../services/userService");
const addressService = require("../services/addressService");

// üìå L·∫•y to√†n b·ªô ng∆∞·ªùi d√πng (ch·ªâ n√™n d√πng cho admin)
const getAllUsers = async (req, res) => {
  try {
    const users = await userService.getAllUsers();
    return res.status(200).json({ success: true, users });
  } catch (error) {
    console.error("‚ö†Ô∏è L·ªói getAllUsers:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng.",
    });
  }
};

// üìå L·∫•y th√¥ng tin user hi·ªán t·∫°i t·ª´ session
const getCurrentUser = async (req, res) => {
  try {
    const sessionUser = req.session?.user;
    // console.log("üì• Cookie g·ª≠i l√™n:", req.headers.cookie);
    // console.log("üì• To√†n b·ªô session server l∆∞u:", req.sessionStore.sessions);
    // console.log("üì• Session hi·ªán t·∫°i t√¨m th·∫•y:", req.session);

    if (!sessionUser) {
      return res.status(401).json({
        success: false,
        message: "‚ùå Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c session ƒë√£ h·∫øt h·∫°n.",
      });
    }

    const user = await userService.getUserById(sessionUser.id);
    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
    }

    const { password, ...safeUser } = user; // xo√° password n·∫øu c√≥
    return res.status(200).json({ success: true, user: safeUser });
  } catch (error) {
    console.error("‚ö†Ô∏è L·ªói getCurrentUser:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.",
    });
  }
};

// üìå C·∫≠p nh·∫≠t th√¥ng tin user hi·ªán t·∫°i
const updateCurrentUser = async (req, res) => {
  try {
    const sessionUser = req.session?.user;
    if (!sessionUser) {
      return res.status(401).json({
        success: false,
        message: "‚ùå Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c session ƒë√£ h·∫øt h·∫°n.",
      });
    }

    const userId = sessionUser.id;
    const { username, fullname, email, phone, address } = req.body;

    // üß© Chu·∫©n h√≥a d·ªØ li·ªáu ng∆∞·ªùi d√πng
    const updatePayload = {};

    if (username) updatePayload.username = username.trim();
    if (fullname) updatePayload.full_name = fullname.trim();
    if (email) updatePayload.email = email.trim();

    // ‚òéÔ∏è Chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i v·ªÅ d·∫°ng +84
    if (phone) {
      let normalizedPhone = phone.trim();
      if (normalizedPhone.startsWith("0")) {
        normalizedPhone = "+84" + normalizedPhone.slice(1);
      } else if (!normalizedPhone.startsWith("+84")) {
        normalizedPhone = "+84" + normalizedPhone;
      }
      updatePayload.phone = normalizedPhone;
    }

    // üîÑ C·∫≠p nh·∫≠t th√¥ng tin user c∆° b·∫£n
    let updatedUser = await userService.getUserById(userId);
    if (Object.keys(updatePayload).length > 0) {
      updatedUser = await userService.updateUser(userId, updatePayload);
    }

    // üè° X·ª≠ l√Ω ƒë·ªãa ch·ªâ n·∫øu FE g·ª≠i l√™n
    let updatedAddress = null;
    if (address && typeof address === "object") {
      const { address_line, note, addressType, address_type, is_primary } = address;

      // ‚úÖ Chu·∫©n ho√° address_line d·∫°ng object
      let normalizedAddressLine;
      if (typeof address_line === "object" && address_line !== null) {
        const { detail, ward, district, city } = address_line;
        normalizedAddressLine = {
          detail: detail || "",
          ward: ward || "",
          district: district || "",
          city: city || "",
        };
      } else {
        normalizedAddressLine = {
          detail: address_line || "",
          ward: "",
          district: "",
          city: "",
        };
      }

      const noteValue = note || "";
      const addrType = addressType || address_type || "Nh√†";
      const isPrimary = is_primary ?? true;

      // üì¨ Ki·ªÉm tra ƒë·ªãa ch·ªâ hi·ªán c√≥
      const existingAddresses = await addressService.getUserAddresses(userId);
      const defaultAddr = await addressService.getDefaultAddress(userId);

      if (!existingAddresses.length) {
        // üÜï User ch∆∞a c√≥ ƒë·ªãa ch·ªâ ‚Üí t·∫°o m·ªõi
        updatedAddress = await addressService.createAddressForUser(
          userId,
          {
            address_line: normalizedAddressLine,
            note: noteValue,
            address_type: addrType,
          },
          isPrimary
        );
      } else if (defaultAddr) {
        // üîÑ ƒê√£ c√≥ default ‚Üí c·∫≠p nh·∫≠t l·∫°i
        updatedAddress = await addressService.updateAddress(defaultAddr.address_id, {
          address_line: normalizedAddressLine,
          note: noteValue,
          address_type: addrType,
          is_default: isPrimary,
        });
      } else {
        // üÜï C√≥ ƒë·ªãa ch·ªâ nh∆∞ng ch∆∞a c√≥ default ‚Üí th√™m m·ªõi v√† ƒë·∫∑t m·∫∑c ƒë·ªãnh
        updatedAddress = await addressService.createAddressForUser(
          userId,
          {
            address_line: normalizedAddressLine,
            note: noteValue,
            address_type: addrType,
          },
          true
        );
      }
    }

    // üîÅ C·∫≠p nh·∫≠t l·∫°i session
    req.session.user = updatedUser;
    await req.session.save();

    // ‚úÖ Tr·∫£ k·∫øt qu·∫£ v·ªÅ FE
    return res.status(200).json({
      success: true,
      message: "‚úÖ H·ªì s∆° ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!",
      user: {
        ...updatedUser,
        address: updatedAddress
          ? {
              address_line:
                typeof updatedAddress.address_line === "string"
                  ? JSON.parse(updatedAddress.address_line)
                  : updatedAddress.address_line,
              note: updatedAddress.note,
              address_type: updatedAddress.address_type,
              is_default: updatedAddress.is_primary,
            }
          : null,
      },
    });
  } catch (error) {
    console.error("‚ö†Ô∏è L·ªói updateCurrentUser:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói server khi ho√†n t·∫•t h·ªì s∆° ng∆∞·ªùi d√πng.",
    });
  }
};


// üìå Xo√° t√†i kho·∫£n user hi·ªán t·∫°i
const deleteCurrentUser = async (req, res) => {
  try {
    const sessionUser = req.session?.user;
    if (!sessionUser) {
      return res.status(401).json({
        success: false,
        message: "‚ùå Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c session ƒë√£ h·∫øt h·∫°n.",
      });
    }

    const deletedUser = await userService.deleteUser(sessionUser.id);
    if (!deletedUser) {
      return res.status(404).json({
        success: false,
        message: "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ xo√°.",
      });
    }

    return res
      .status(200)
      .json({ success: true, message: "‚úÖ T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c xo√° th√†nh c√¥ng." });
  } catch (error) {
    console.error("‚ö†Ô∏è L·ªói deleteCurrentUser:", error);
    return res
      .status(500)
      .json({ success: false, message: "L·ªói server khi xo√° ng∆∞·ªùi d√πng." });
  }
};

// üìå Kho√° t√†i kho·∫£n user hi·ªán t·∫°i
const lockCurrentUser = async (req, res) => {
  try {
    const sessionUser = req.session?.user;
    if (!sessionUser) {
      return res.status(401).json({
        success: false,
        message: "‚ùå Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c session ƒë√£ h·∫øt h·∫°n.",
      });
    }

    const lockedUser = await userService.lockUserAccount(sessionUser.id);
    if (!lockedUser) {
      return res.status(404).json({
        success: false,
        message: "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ kho√°.",
      });
    }

    return res.status(200).json({
      success: true,
      message: "üîê T√†i kho·∫£n ƒë√£ b·ªã kho√° th√†nh c√¥ng.",
      user: lockedUser,
    });
  } catch (error) {
    console.error("‚ö†Ô∏è L·ªói lockCurrentUser:", error);
    return res
      .status(500)
      .json({ success: false, message: "L·ªói server khi kho√° t√†i kho·∫£n." });
  }
};

// üìå T√¨m ng∆∞·ªùi d√πng theo username
const getUserByUsername = async (req, res) => {
  try {
    const { username } = req.params;
    const user = await userService.getUserByUsername(username);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi username n√†y!",
      });
    }
    return res.status(200).json({ success: true, user });
  } catch (error) {
    console.error("‚ö†Ô∏è L·ªói getUserByUsername:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói server khi t√¨m ng∆∞·ªùi d√πng theo username.",
    });
  }
};

// üìå T√¨m ng∆∞·ªùi d√πng theo email
const getUserByEmail = async (req, res) => {
  try {
    const { email } = req.params;
    const user = await userService.getUserByEmail(email);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y!",
      });
    }
    return res.status(200).json({ success: true, user });
  } catch (error) {
    console.error("‚ö†Ô∏è L·ªói getUserByEmail:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói server khi t√¨m ng∆∞·ªùi d√πng theo email.",
    });
  }
};

// üìå T√¨m ng∆∞·ªùi d√πng theo s·ªë ƒëi·ªán tho·∫°i
const getUserByPhone = async (req, res) => {
  try {
    const { phone } = req.params;
    const user = await userService.getUserByPhone(phone);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi s·ªë ƒëi·ªán tho·∫°i n√†y!",
      });
    }
    return res.status(200).json({ success: true, user });
  } catch (error) {
    console.error("‚ö†Ô∏è L·ªói getUserByPhone:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói server khi t√¨m ng∆∞·ªùi d√πng theo s·ªë ƒëi·ªán tho·∫°i.",
    });
  }
};

module.exports = {
  getAllUsers,
  getCurrentUser,
  updateCurrentUser,
  deleteCurrentUser,
  lockCurrentUser,
  getUserByUsername,
  getUserByEmail,
  getUserByPhone,
};
