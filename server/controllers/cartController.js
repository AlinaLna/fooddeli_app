// controllers/cartController.js
const cartService = require("../services/cartService");
const cartItemService = require("../services/cart_itemService"); // ‚ö†Ô∏è t√™n file chu·∫©n
const { getSessionUser } = require("../services/sessionService");

const cartController = {
  /**
   * üõí L·∫•y gi·ªè h√†ng c·ªßa user hi·ªán t·∫°i (t·ª´ session)
   */
  async getUserCart(req, res) {
    try {
      const sessionUser = getSessionUser(req);
      if (!sessionUser)
        return res
          .status(401)
          .json({ success: false, message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p" });

      const cart = await cartService.getOrCreateCartForUser(sessionUser.id);
      const items = await cartItemService.getItemsByCartId(cart.cart_id);

      return res.status(200).json({
        success: true,
        message: "L·∫•y gi·ªè h√†ng th√†nh c√¥ng",
        data: { cart, items },
      });
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y gi·ªè h√†ng:", error);
      return res.status(500).json({ success: false, message: error.message });
    }
  },

  /**
   * ‚ûï Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
   */
  async addItemToCart(req, res) {
    try {
      const sessionUser = getSessionUser(req);
      if (!sessionUser)
        return res
          .status(401)
          .json({ success: false, message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p" });

      const { shop_id, product_id, quantity, unit_price } = req.body;
      if (!shop_id || !product_id || !quantity || !unit_price) {
        return res
          .status(400)
          .json({ success: false, message: "Thi·∫øu d·ªØ li·ªáu c·∫ßn thi·∫øt" });
      }

      const cart = await cartService.getOrCreateCartForUser(sessionUser.id);

      const newItem = await cartItemService.createCartItem({
        cart_id: cart.cart_id,
        shop_id,
        product_id,
        quantity,
        unit_price,
      });

      const items = await cartItemService.getItemsByCartId(cart.cart_id);
      const subtotal = items.reduce((sum, i) => sum + Number(i.line_total), 0);
      await cartService.updateCartSummary(cart.cart_id, subtotal, items.length);

      return res.status(201).json({
        success: true,
        message: "Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng th√†nh c√¥ng",
        data: newItem,
      });
    } catch (error) {
      console.error("‚ùå L·ªói khi th√™m s·∫£n ph·∫©m:", error);
      return res.status(500).json({ success: false, message: error.message });
    }
  },

  /**
   * ‚úèÔ∏è C·∫≠p nh·∫≠t item trong gi·ªè h√†ng (l·∫•y itemId t·ª´ body, kh√¥ng t·ª´ URL)
   */
  async updateCartItem(req, res) {
    try {
      const sessionUser = getSessionUser(req);
      if (!sessionUser)
        return res
          .status(401)
          .json({ success: false, message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p" });

      const { itemId, quantity, unit_price } = req.body;
      if (!itemId)
        return res
          .status(400)
          .json({ success: false, message: "Thi·∫øu itemId trong request body" });

      const updatedItem = await cartItemService.updateCartItem(itemId, {
        quantity,
        unit_price,
      });

      const items = await cartItemService.getItemsByCartId(updatedItem.cart_id);
      const subtotal = items.reduce((sum, i) => sum + Number(i.line_total), 0);
      await cartService.updateCartSummary(updatedItem.cart_id, subtotal, items.length);

      return res.status(200).json({
        success: true,
        message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m trong gi·ªè h√†ng th√†nh c√¥ng",
        data: updatedItem,
      });
    } catch (error) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t item:", error);
      return res.status(500).json({ success: false, message: error.message });
    }
  },

  /**
   * ‚ùå X√≥a item kh·ªèi gi·ªè h√†ng (itemId g·ª≠i trong body)
   */
  async deleteCartItem(req, res) {
    try {
      const sessionUser = getSessionUser(req);
      if (!sessionUser)
        return res
          .status(401)
          .json({ success: false, message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p" });

      const { itemId } = req.body;
      if (!itemId)
        return res
          .status(400)
          .json({ success: false, message: "Thi·∫øu itemId trong request body" });

      const item = await cartItemService.getCartItemById(itemId);
      if (!item)
        return res
          .status(404)
          .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè" });

      await cartItemService.deleteCartItem(itemId);

      const items = await cartItemService.getItemsByCartId(item.cart_id);
      const subtotal = items.reduce((sum, i) => sum + Number(i.line_total), 0);
      await cartService.updateCartSummary(item.cart_id, subtotal, items.length);

      return res.status(200).json({
        success: true,
        message: "X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng th√†nh c√¥ng",
      });
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a item:", error);
      return res.status(500).json({ success: false, message: error.message });
    }
  },

  /**
   * üóëÔ∏è X√≥a to√†n b·ªô gi·ªè h√†ng
   */
  async clearCart(req, res) {
    try {
      const sessionUser = getSessionUser(req);
      if (!sessionUser)
        return res
          .status(401)
          .json({ success: false, message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p" });

      const cart = await cartService.getCartByUserId(sessionUser.id);
      if (!cart)
        return res
          .status(404)
          .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });

      const items = await cartItemService.getItemsByCartId(cart.cart_id);
      for (const item of items) {
        await cartItemService.deleteCartItem(item.id);
      }

      await cartService.updateCartSummary(cart.cart_id, 0, 0);

      return res.status(200).json({
        success: true,
        message: "ƒê√£ x√≥a to√†n b·ªô s·∫£n ph·∫©m trong gi·ªè h√†ng",
      });
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a to√†n b·ªô gi·ªè:", error);
      return res.status(500).json({ success: false, message: error.message });
    }
  },
};

module.exports = cartController;
