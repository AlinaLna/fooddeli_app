const GenericDao = require("./generic_dao");
const Product = require("../models/product");
const pool = require("../config/db");

class ProductDao extends GenericDao {
  constructor() {
    super("products", Product);
  }

  // Danh m·ª•c h·ª£p l·ªá (th·ªëng nh·∫•t v·ªõi Service)
  VALID_CATEGORIES = ["Th·ª©c ƒÉn", "ƒê·ªì u·ªëng", "Tr√°ng mi·ªáng", "Kh√°c", "Combo"];

  /**
   * üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i c√≤n b√°n / ng·ª´ng b√°n
   * @param {number} productId
   * @param {boolean} isAvailable
   */
  async updateAvailability(productId, isAvailable) {
    if (typeof isAvailable !== "boolean") {
      throw new Error("isAvailable ph·∫£i l√† boolean");
    }

    const query = `
      UPDATE products
      SET is_available = $1,
          updated_at = NOW()
      WHERE product_id = $2
      RETURNING *;
    `;
    const result = await pool.query(query, [isAvailable, productId]);
    return result.rows[0];
  }

  /**
   * üè∑Ô∏è C·∫≠p nh·∫≠t danh m·ª•c s·∫£n ph·∫©m
   * @param {number} productId
   * @param {string} category
   */
  async updateCategory(productId, category) {
    if (!this.VALID_CATEGORIES.includes(category)) {
      throw new Error(
        `Danh m·ª•c kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: ${this.VALID_CATEGORIES.join(", ")}`
      );
    }

    const query = `
      UPDATE products
      SET category = $1,
          updated_at = NOW()
      WHERE product_id = $2
      RETURNING *;
    `;
    const result = await pool.query(query, [category, productId]);
    return result.rows[0];
  }

  /**
   * ‚è±Ô∏è C·∫≠p nh·∫≠t th·ªùi gian chu·∫©n b·ªã (prep_minutes)
   * @param {number} productId
   * @param {number} prepMinutes
   */
  async updatePrepMinutes(productId, prepMinutes) {
    if (!Number.isInteger(prepMinutes) || prepMinutes < 0) {
      throw new Error("prep_minutes ph·∫£i l√† s·ªë nguy√™n kh√¥ng √¢m");
    }

    const query = `
      UPDATE products
      SET prep_minutes = $1,
          updated_at = NOW()
      WHERE product_id = $2
      RETURNING *;
    `;
    const result = await pool.query(query, [prepMinutes, productId]);
    return result.rows[0];
  }

  /**
   * üè™ L·∫•y to√†n b·ªô s·∫£n ph·∫©m thu·ªôc 1 shop
   * @param {number} shopId
   */
  async getProductsByShop(shopId) {
    const query = `
      SELECT * FROM products
      WHERE shop_id = $1
      ORDER BY updated_at DESC;
    `;
    const result = await pool.query(query, [shopId]);
    return result.rows;
  }

  /**
   * üç± L·ªçc s·∫£n ph·∫©m theo danh m·ª•c
   * @param {string} category
   * @param {number} limit
   * @param {number} offset
   */
  async getProductsByCategory(category, limit = 20, offset = 0) {
    if (!this.VALID_CATEGORIES.includes(category)) {
      throw new Error(
        `Danh m·ª•c kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: ${this.VALID_CATEGORIES.join(", ")}`
      );
    }

    const query = `
      SELECT * FROM products
      WHERE category = $1
      ORDER BY updated_at DESC
      LIMIT $2 OFFSET $3;
    `;
    const result = await pool.query(query, [category, limit, offset]);
    return result.rows;
  }

  /**
   * üîç T√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n
   * @param {string} keyword
   * @param {number} limit
   * @param {number} offset
   */
  async searchProducts(keyword, limit = 20, offset = 0) {
    const query = `
      SELECT * FROM products
      WHERE LOWER(name) LIKE LOWER($1)
      ORDER BY updated_at DESC
      LIMIT $2 OFFSET $3;
    `;
    const result = await pool.query(query, [`%${keyword}%`, limit, offset]);
    return result.rows;
  }

  /**
   * üì¶ L·∫•y danh s√°ch s·∫£n ph·∫©m ƒëang b√°n
   */
  async getAvailableProducts() {
    const query = `
      SELECT * FROM products
      WHERE is_available = TRUE
      ORDER BY updated_at DESC;
    `;
    const result = await pool.query(query);
    return result.rows;
  }

  /**
   * üìÇ L·∫•y danh m·ª•c s·∫£n ph·∫©m (t·ªëi ƒëa 4 lo·∫°i)
   */
  async getAllCategories() {
    try {
      const query = `
        SELECT DISTINCT category
        FROM products
        WHERE category IS NOT NULL
        ORDER BY category
        LIMIT 4;
      `;
      const result = await pool.query(query);
      return result.rows.map((row) => ({ name: row.category }));
    } catch (err) {
      console.error("‚ùå [DAO] L·ªói khi truy v·∫•n danh m·ª•c:", err.message);
      throw err;
    }
  }
}

module.exports = new ProductDao();
