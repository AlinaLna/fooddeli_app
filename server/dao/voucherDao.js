// dao/voucherDao.js
const GenericDao = require("./generic_dao");
const Voucher = require("../models/voucher");

class VoucherDao extends GenericDao {
  constructor() {
    super("vouchers", Voucher);
  }

  /**
   * üîç T√¨m voucher theo m√£ code
   * @param {string} code - M√£ voucher
   * @returns {Promise<object|null>} - Voucher n·∫øu t·ªìn t·∫°i, null n·∫øu kh√¥ng
   */
  async findByCode(code) {
    const query = `
      SELECT * FROM vouchers
      WHERE code = $1
      LIMIT 1;
    `;
    const result = await this.db.query(query, [code]);
    return result.rows[0] || null;
  }

  /**
   * üìú L·∫•y danh s√°ch voucher ƒëang c√≤n hi·ªáu l·ª±c
   * @returns {Promise<object[]>} - Danh s√°ch voucher c√≤n hi·ªáu l·ª±c
   */
  async getActiveVouchers() {
    const query = `
      SELECT * FROM vouchers
      WHERE status = 'active'
      AND NOW() BETWEEN start_date AND end_date
      ORDER BY start_date DESC;
    `;
    const result = await this.db.query(query);
    return result.rows;
  }

  /**
   * ‚úÖ Ki·ªÉm tra voucher c√≥ h·ª£p l·ªá cho ƒë∆°n h√†ng hay kh√¥ng
   * @param {string} code - M√£ voucher
   * @param {number} orderValue - Gi√° tr·ªã ƒë∆°n h√†ng
   * @returns {Promise<object>} - Voucher n·∫øu h·ª£p l·ªá, ng∆∞·ª£c l·∫°i throw l·ªói
   */
  async validateVoucher(code, orderValue) {
    const voucher = await this.findByCode(code);
    if (!voucher) {
      throw new Error("Voucher kh√¥ng t·ªìn t·∫°i");
    }
    if (voucher.status !== "active") {
      throw new Error("Voucher kh√¥ng c√≤n ho·∫°t ƒë·ªông");
    }
    const now = new Date();
    if (now < new Date(voucher.start_date) || now > new Date(voucher.end_date)) {
      throw new Error("Voucher ƒë√£ h·∫øt h·∫°n ho·∫∑c ch∆∞a b·∫Øt ƒë·∫ßu");
    }
    if (voucher.min_order_value && orderValue < voucher.min_order_value) {
      throw new Error(
        `ƒê∆°n h√†ng ch∆∞a ƒë·ªß gi√° tr·ªã t·ªëi thi·ªÉu (${voucher.min_order_value}) ƒë·ªÉ √°p d·ª•ng voucher`
      );
    }
    return voucher;
  }

  /**
   * üö´ V√¥ hi·ªáu h√≥a m·ªôt voucher
   * @param {number} voucherId - ID voucher
   * @returns {Promise<object>} - Voucher sau khi c·∫≠p nh·∫≠t
   */
  async disableVoucher(voucherId) {
    const query = `
      UPDATE vouchers
      SET status = 'disabled',
          updated_at = NOW()
      WHERE voucher_id = $1
      RETURNING *;
    `;
    const result = await this.db.query(query, [voucherId]);
    return result.rows[0];
  }

  /**
   * üìâ H·∫øt h·∫°n t·ª± ƒë·ªông t·∫•t c·∫£ voucher qu√° h·∫°n
   * @returns {Promise<number>} - S·ªë l∆∞·ª£ng voucher ƒë√£ c·∫≠p nh·∫≠t
   */
  async expireOutdatedVouchers() {
    const query = `
      UPDATE vouchers
      SET status = 'expired'
      WHERE end_date < NOW() AND status = 'active';
    `;
    const result = await this.db.query(query);
    return result.rowCount;
  }
}

module.exports = new VoucherDao();
