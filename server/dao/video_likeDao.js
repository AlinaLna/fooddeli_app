// dao/videoLikeDao.js
const GenericDao = require("./generic_dao");
const VideoLike = require("../models/video_like");

class VideoLikeDao extends GenericDao {
  constructor() {
    super("video_likes", VideoLike);
  }

  /**
   * üìä L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi ƒë√£ like 1 video
   * @param {number} videoId - ID video
   * @returns {Promise<object[]>} - Danh s√°ch l∆∞·ª£t th√≠ch
   */
  async getLikesByVideoId(videoId) {
    const query = `
      SELECT vl.*, u.username, u.avatar_url
      FROM video_likes vl
      JOIN users u ON vl.user_id = u.id
      WHERE vl.video_id = $1
      ORDER BY vl.id DESC;
    `;
    const result = await this.db.query(query, [videoId]);
    return result.rows;
  }

  /**
   * üëç Ki·ªÉm tra xem user ƒë√£ like video ch∆∞a
   * @param {number} videoId - ID video
   * @param {number} userId - ID ng∆∞·ªùi d√πng
   * @returns {Promise<boolean>} - true n·∫øu ƒë√£ like, false n·∫øu ch∆∞a
   */
  async hasUserLiked(videoId, userId) {
    const query = `
      SELECT 1 FROM video_likes
      WHERE video_id = $1 AND user_id = $2
      LIMIT 1;
    `;
    const result = await this.db.query(query, [videoId, userId]);
    return result.rowCount > 0;
  }

  /**
   * ‚ù§Ô∏è Th√™m l∆∞·ª£t th√≠ch m·ªõi (n·∫øu ch∆∞a like)
   * @param {number} videoId - ID video
   * @param {number} userId - ID ng∆∞·ªùi d√πng
   * @returns {Promise<object>} - B·∫£n ghi like m·ªõi
   */
  async addLike(videoId, userId) {
    // Ki·ªÉm tra n·∫øu ƒë√£ like r·ªìi th√¨ kh√¥ng th√™m n·ªØa
    const alreadyLiked = await this.hasUserLiked(videoId, userId);
    if (alreadyLiked) {
      throw new Error("User already liked this video");
    }

    const query = `
      INSERT INTO video_likes (video_id, user_id)
      VALUES ($1, $2)
      RETURNING *;
    `;
    const result = await this.db.query(query, [videoId, userId]);
    return result.rows[0];
  }

  /**
   * üíî G·ª° l∆∞·ª£t th√≠ch (unlike)
   * @param {number} videoId - ID video
   * @param {number} userId - ID ng∆∞·ªùi d√πng
   * @returns {Promise<boolean>} - true n·∫øu ƒë√£ x√≥a, false n·∫øu kh√¥ng c√≥ g√¨ ƒë·ªÉ x√≥a
   */
  async removeLike(videoId, userId) {
    const query = `
      DELETE FROM video_likes
      WHERE video_id = $1 AND user_id = $2;
    `;
    const result = await this.db.query(query, [videoId, userId]);
    return result.rowCount > 0;
  }

  /**
   * üî¢ ƒê·∫øm t·ªïng s·ªë l∆∞·ª£t th√≠ch c·ªßa video
   * @param {number} videoId - ID video
   * @returns {Promise<number>} - T·ªïng l∆∞·ª£t th√≠ch
   */
  async countLikes(videoId) {
    const query = `
      SELECT COUNT(*)::int AS total_likes
      FROM video_likes
      WHERE video_id = $1;
    `;
    const result = await this.db.query(query, [videoId]);
    return result.rows[0]?.total_likes || 0;
  }
}

module.exports = new VideoLikeDao();
